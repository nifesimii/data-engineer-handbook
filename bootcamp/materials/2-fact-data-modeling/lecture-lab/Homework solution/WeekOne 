--Task 1
-- Create a DDL for an actors table with the following fields:
CREATE TABLE actors (
actor text,
actorid text,
films films[],
quality_class quality_class,
current_year INTEGER,
is_active BOOLEAN,
PRIMARY KEY(actorid,current_year)
);


-- create  quality_class and film struct type
create type films as(
film TEXT,
votes INTEGER,
rating INTEGER,
filmid TEXT
)

create type quality_class as enum ('star', 'good', 'average', 'bad');


--Task 2
--Cumulative table generation query: Write a query that populates the actors table one year at a time.
DO $$
DECLARE
    year_start INT := 1970; -- Starting year
    year_end INT := 2021;   -- Ending year
    asofyear INT;       -- Loop variable for previous year
	asofthisyear INT;       -- Loop variable for this year
BEGIN
	-- Loop from the starting year to the ending year
	FOR asofyear IN year_start..year_end LOOP
	asofthisyear := asofyear + 1;
	insert into actors
	WITH last_year AS (
		SELECT * FROM actors
		WHERE current_year = asofyear
	),
	this_year AS (
	SELECT actor,
	actorid,
	YEAR,
	CASE WHEN year IS NULL THEN ARRAY[]::films[]
	ELSE ARRAY_AGG(ROW(film, votes, rating, filmid)::films)
	END AS films,
	avg(rating) as average_rating
	from actor_films af 
	where year = asofthisyear
	group by actor,actorid,year)
	SELECT 
	    COALESCE(ty.actor, ly.actor) actor,
	    COALESCE(ty.actorid , ly.actorid) actorid,
	    COALESCE(ly.films, ARRAY[]::films[]) || 
	                     CASE WHEN ty.year IS NOT NULL THEN ty.films
	                     ELSE ARRAY[]::films[]
	            END as films,
	 	case when array_length(ty.films,1) is not null then
		case WHEN ty.average_rating > 8 THEN 'star'
		     	WHEN ty.average_rating > 7 AND average_rating <= 8 THEN 'good'
		     	WHEN average_rating > 6 AND average_rating <= 7 THEN 'average'
		     	WHEN average_rating <= 6 THEN 'bad'
		     	end::quality_class 
		     	else ly.quality_class
		     	end as quality_class,           
	    COALESCE(ty.year,ly.current_year+1) as current_year,
	    case when array_length(ty.films,1) is null then false
	    else true 
	    end as is_active
	FROM last_year ly
	FULL OUTER JOIN this_year ty
	    on ly.actorid = ty.actorid;   
	END LOOP;
END $$;
 

--Task 3
--DDL for actors_history_scd table: Create a DDL for an actors_history_scd table with the following features:
create table actors_history_scd(
actor text,
actorid text,
quality_class quality_class,
is_active BOOLEAN,
start_date INTEGER,
end_date INTEGER,
current_year INTEGER,
PRIMARY KEY(actorid,start_date)
)


--create actor scd type
create type actor_scd as (
quality_class quality_class,
is_active boolean,
start_date INTEGER,
end_date INTEGER)


--Task 4
--create backfill query for actors_history_scd
insert into actors_history_scd
with  with_previous as (
SELECT 
actor,
actorid ,
current_year ,
quality_class,
is_active,
LAG(quality_class, 1) OVER (PARTITION BY actorid ORDER BY current_year) as previous_quality_class,
LAG(is_active, 1) OVER (PARTITION BY actorid ORDER BY current_year) as previous_is_active
FROM actors
where current_year <= 2021
),
with_indicators AS (
SELECT *, 
case 
when quality_class <> previous_quality_class then 1 
when is_active <> previous_is_active then 1 
ELSE 0
END AS change_indicator
from with_previous),
with_streaks AS (
SELECT *,
SUM(change_indicator)
	OVER (PARTITION BY actor ORDER BY current_year) AS streak_identifier
	FROM with_indicators
)
SELECT actor,
		actorid,
	quality_class,
	is_active,
--	streak_identifier,
	MIN(current_year) AS start_year,
	MAX(current_year) AS end_year,
	2021 as current_year
  FROM with_streaks
 GROUP by actor,actorid,streak_identifier, is_active,quality_class
 order by actor,actorid
 
 
 
--Task 5
--Create incremental query for actors_history_scd
 
with last_year_scd as (
 select * from actors_history_scd ahs
 where current_year = 2020
 and end_date = 2021),
 historical_scd as (
 select actor,actorid,quality_class,is_active,start_date,end_date FROM actors_history_scd ahs
 where current_year = 2020
 and end_date < 2020),
 this_year_data as (
 select * from actors a
 where current_year = 2021
 ),
 unchanged_records AS(
 select ts.actor,
 ts.actorid,
 ts.quality_class, 
 ts.is_active,
 ls.start_date,
 ts.current_year as end_year
 from this_year_data ts
 join last_year_scd ls
 on ls.actorid = ts.actorid
 where ts.quality_class = ls.quality_class
 and ts.is_active = ls.is_active
 ),
 changed_records AS(
  select ts.actor,
  ts.actorid,
 unnest(ARRAY[row(ls.quality_class,
 ls.is_active,
 ls.start_date,
 ls.end_date)::actor_scd,
 row(
 ts.quality_class,
 ts.is_active,
 ts.current_year,
 ts.current_year
 )::actor_scd]) as records
 from this_year_data ts
 left join last_year_scd ls
 on ls.actorid = ts.actorid
 where (ts.quality_class <> ls.quality_class
 OR ts.is_active <> ls.is_active)
 ), unnested_changed_records AS (
 select actor,
 actorid,
 (records::actor_scd).quality_class,
 (records::actor_scd).is_active,
 (records::actor_scd).start_date,
  (records::actor_scd).end_date
 from changed_records),
 new_records as (
 select 
 ts.actor,
 ts.actorid,
 ts.quality_class,
 ts.is_active,
 ts.current_year as start_date,
 ts.current_year as end_date
 from this_year_data ts
 left join last_year_scd ls
 on ts.actorid= ls.actorid
 where ls.actorid is NULL
 )
 select * from historical_scd
 union all
 select * from unchanged_records
 union all
 select * from unnested_changed_records
 union all
 select * from new_records
 
 
 


